{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Length","title","changeTime","type","time","formatTime","className","Button","variant","onClick","App","useState","displayTime","setDisplayTime","breakTime","setBreakTime","session","setSession","timerOn","setTimerOn","onBreak","setBreak","Audio","breakAudio","playBreakSound","currentTime","play","minutes","Math","floor","seconds","amount","prev","Container","Col","Row","Date","getTime","nextDate","onBreakVariable","interval","setInterval","localStorage","clear","setItem","clearInterval","getItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.809d5828.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useState } from 'react';\nimport { Button, Alert, Col, Row, Container } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Box from '@material-ui/core/Box';\n\n\nfunction App() {\n\n  const [displayTime, setDisplayTime] = useState(25*60);\n  const [breakTime , setBreakTime] = useState(5 * 60);\n  const [session, setSession] = useState(25*60);\n  const [timerOn, setTimerOn] = useState(false);\n  const[onBreak, setBreak] = useState(false);\n  const[breakAudio, setBreakAudio] = useState(\n    new Audio(\"./Censor Beep Sound Effect.mp3\")\n  );\n\n  const playBreakSound = () => {\n    breakAudio.currentTime = 0;\n    breakAudio.play();\n  }\n  const formatTime = (time) =>{\n\n \n    let minutes = Math.floor(time/60);\n    let seconds = time % 60;\n    return (\n      (minutes < 10 ? \"0\" + minutes : minutes) + \n      \":\" +\n      (seconds < 10 ? \"0\" + seconds : seconds)\n    )\n  }\n  const changeTime = (amount, type) => {\n    if(type == \"break\"){\n      if(breakTime <= 60 && amount < 0){\n        return;\n      }\n      setBreakTime((prev) => prev + amount)\n    }\n    else{\n      if(session <= 60 && amount < 0){\n        return;\n      }\n      setSession((prev) => prev + amount)\n    if(!timerOn){\n      setDisplayTime(session + amount);\n    }\n    }\n\n  }\n   const controlTime = () => {\n     let second = 1000;\n     let date = new Date().getTime();\n     let nextDate = new Date().getTime() + second;\n     let onBreakVariable = onBreak;\n     if(!timerOn){\n      let interval = setInterval(() => {\n        date = new Date().getTime();\n        if(date > nextDate){\n          setDisplayTime(prev => {\n            if(prev <= 0 && !onBreakVariable){\n              playBreakSound();\n              onBreakVariable = true;\n              setBreak(true)\n              return breakTime;\n            }else if (prev <= 0 && onBreakVariable && !onBreakVariable){\n              playBreakSound();\n              onBreakVariable = false;\n              setBreak(false)\n              return session;\n            }\n            return prev - 1;\n          });\n          nextDate += second;\n        }\n      }, 30);\n      localStorage.clear();\n      localStorage.setItem('interval-id', interval)\n    }\n\n    if(timerOn){\n      clearInterval(localStorage.getItem(\"interval-id\"));\n    }\n    setTimerOn(!timerOn)\n   };\n   const resetTime = () => {\n     setDisplayTime(25 * 60);\n     setBreakTime(5*60);\n     setSession(25*60);\n   };\n\n  return (\n    <div>\n      <Container>\n        <Col>\n        <Row>\n        <div>\n        <h1>{onBreak ? \"break\" : \"session\"}</h1>\n        </div>\n    \n        </Row>\n\n        <Row>\n\n     <Length\n        title = {\"break\"}\n        changeTime = {changeTime}\n        type = {\"break\"}\n        time = {breakTime}\n        formatTime = {formatTime}\n        />\n        <div className=\"display\" >\n          {formatTime(displayTime)}\n        </div>\n        <Length\n        title = {\"timer\"}\n        changeTime = {changeTime}\n        type = {\"session\"}\n        time = {session}\n        formatTime = {formatTime}\n        />\n        </Row>\n     <Row>\n     <Button onClick = {controlTime}>\n               {timerOn ? (\n                 <h1>pause</h1>\n               ):(<h1>play</h1>)}\n          </Button>\n          <Button onClick={() => {resetTime()}}>\n            <h1>reset</h1>\n          </Button>\n\n     </Row>\n    </Col>\n    </Container>\n    </div>\n             \n\n  );\n}\n\nfunction Length({ title, changeTime, type, time, formatTime }){\n    return(\n      <div className=\"heading\">\n        <h3>{title}</h3>\n        <div className=\"time-sets\">\n          <Button variant = \"secondary\"\n          onClick = {() => {\n            changeTime(-60, type)\n          }}\n          >\n            ↓\n          </Button>\n          <h3>\n               {formatTime(time)}\n          </h3>\n          <Button onClick = {() => {\n            changeTime(60, type)\n          }}>\n          ↑\n          </Button>\n        </div>\n            \n      </div>\n    )\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}